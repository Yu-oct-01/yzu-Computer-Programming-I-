// Polynomial division provided that the quotient and remainder have integer coefficients
#include <iostream>
using namespace std;

// quotient = dividend / divisor; remainder = dividend % divisor provided that
// dividendExpon[ dividendSize - 1 ] >= divisorExpon[ divisorSize - 1 ], and
// neither dividend nor divisor is the zero polynomial
void division( int *dividendCoef, long long int *dividendExpon, int dividendSize,
              int *divisorCoef, long long int *divisorExpon, int divisorSize,
              int *&quotientCoef, long long int *&quotientExpon, int &quotientSize,
              int *&remainderCoef, long long int *&remainderExpon, int &remainderSize );

// returns true if and only if polynomial1 == polynomial2
bool equal( int *coefficient1, long long int *exponent1, int size1,
           int *coefficient2, long long int *exponent2, int size2 );

// minuend -= subtrahend
void subtraction( int *minuendCoef, long long int *minuendExpon, int &minuendSize,
                 int *subtrahendCoef, long long int *subtrahendExpon, int subtrahendSize );

// outputs the specified polynomial
void output( int *coefficient, long long int *exponent, int size );

const int arraySize = 20;

int main()
{
  int T;
  cin >> T;
  for( int t = 0; t < T; t++ )
  {
     int dividendSize;
     cin >> dividendSize; // input dividend
     int *dividendCoef = new int[ dividendSize ]();
     long long int *dividendExpon = new long long int[ dividendSize ]();
     for( int i = dividendSize - 1; i >= 0; i-- )
        cin >> dividendCoef[ i ];
     for( int i = dividendSize - 1; i >= 0; i-- )
        cin >> dividendExpon[ i ];

     int divisorSize;    
     cin >> divisorSize; // input divisor
     int *divisorCoef = new int[ divisorSize ]();
     long long int *divisorExpon = new long long int[ divisorSize ]();
     for( int i = divisorSize - 1; i >= 0; i-- )
        cin >> divisorCoef[ i ];
     for( int i = divisorSize - 1; i >= 0; i-- )
        cin >> divisorExpon[ i ];

     int quotientSize;
     int *quotientCoef;
     long long int *quotientExpon;

     int remainderSize;
     int *remainderCoef;
     long long int *remainderExpon;

     // quotient = dividend / divisor; remainder = dividend % divisor
     division( dividendCoef, dividendExpon, dividendSize,
               divisorCoef, divisorExpon, divisorSize,
               quotientCoef, quotientExpon, quotientSize,
               remainderCoef, remainderExpon, remainderSize );

     output( quotientCoef, quotientExpon, quotientSize );
     output( remainderCoef, remainderExpon, remainderSize );

     delete[] dividendCoef;
     delete[] dividendExpon;
     delete[] divisorCoef;
     delete[] divisorExpon;
     delete[] quotientCoef;
     delete[] quotientExpon;
     delete[] remainderCoef;
     delete[] remainderExpon;
  }
}

// quotient = dividend / divisor; remainder = dividend % divisor provided that
// dividendExpon[ dividendSize - 1 ] >= divisorExpon[ divisorSize - 1 ], and
// neither dividend nor divisor is the zero polynomial
void division( int *dividendCoef, long long int *dividendExpon, int dividendSize,
              int *divisorCoef, long long int *divisorExpon, int divisorSize,
              int *&quotientCoef, long long int *&quotientExpon, int &quotientSize,
              int *&remainderCoef, long long int *&remainderExpon, int &remainderSize )
{
  quotientSize=20;
  quotientCoef = new int [quotientSize];
  quotientExpon = new long long int [quotientSize];

  for(int i=0; i<quotientSize; i++)
  {
     quotientCoef[i]=0;
     quotientExpon[i]=0;
  }

  remainderSize=dividendSize;
  remainderCoef = new int [remainderSize];
  remainderExpon = new long long [remainderSize];

  for(int i=remainderSize-1; i>=0; i--)
  {
     remainderCoef[i]=dividendCoef[i];
     remainderExpon[i]=dividendExpon[i];
  }

  int bufferSize=divisorSize;
  int* bufferCoef = new int [bufferSize];
  long long int* bufferExpon = new long long int [bufferSize];

  for(int i=quotientSize-1; i>=0; i--)
  {
     quotientExpon[i]=remainderExpon[remainderSize-1]-divisorExpon[divisorSize-1];
     quotientCoef[i]=remainderCoef[remainderSize-1]/divisorCoef[divisorSize-1];

     for(int j=bufferSize-1; j>=0; j--)
     {
        bufferExpon[j]=quotientExpon[i] + divisorExpon[j];
        bufferCoef[j]=quotientCoef[i] * divisorCoef[j];
     }

     if(equal(remainderCoef, remainderExpon, remainderSize, bufferCoef, bufferExpon, bufferSize))
     {
        remainderSize=1;
        remainderCoef[0]=0;
        remainderExpon[0]=0;
        break;
     }

     subtraction(remainderCoef, remainderExpon, remainderSize,
                 bufferCoef, bufferExpon, bufferSize);

     if(remainderExpon[remainderSize-1]<divisorExpon[divisorSize-1])
        break;
  }

  int temp=0;
  for(int i=0; i<quotientSize; i++)//排好
  {
     if(quotientCoef[i] != 0)
     {
        swap(quotientCoef[i], quotientCoef[temp]);
        swap(quotientExpon[i], quotientExpon[temp]);
        temp++;
     }
  }

  quotientSize=temp;

  delete [] bufferCoef;
  delete [] bufferExpon;
}

// returns true if and only if polynomial1 == polynomial2
bool equal( int *coefficient1, long long int *exponent1, int size1,
           int *coefficient2, long long int *exponent2, int size2 )
{
  if( size1 != size2 )
     return false;

  for( int i = 0; i < size1; i++ )
     if( coefficient1[ i ] != coefficient2[ i ] || exponent1[ i ] != exponent2[ i ] )
        return false;

  return true;
}

// minuend -= subtrahend
void subtraction( int *minuendCoef, long long int *minuendExpon, int &minuendSize,
                 int *subtrahendCoef, long long int *subtrahendExpon, int subtrahendSize )
{
  for(int i=minuendSize-1; i>=0; i--)
  {
     bool flag=0;
     int temp=0;
     for(int j=subtrahendSize-1; j>=0; j--)
     {
        temp=j;
        if(minuendExpon[i]==subtrahendExpon[j])
        {
           minuendCoef[i] -= subtrahendCoef[j];
           if(minuendCoef[i]==0)
           {
              for(int k=i; k<minuendSize-1; k++)
              {
                 minuendCoef[k]=minuendCoef[k+1];
                 minuendExpon[k]=minuendExpon[k+1];
              }
              minuendSize--;
             
           }
           flag=1;
           break;
        }
     }
     if(!flag)//被減數沒有此項
     {
        minuendCoef[minuendSize] = -1 * subtrahendCoef[i];
        minuendExpon[minuendSize] = subtrahendExpon[i];
        minuendSize++;
     }

  }

  for (int i = 0; i < minuendSize - 1; i++) {//依次方排
       for (int j = i + 1; j < minuendSize; j++) {
           if (minuendExpon[i] < minuendExpon[j]) {
               swap(minuendCoef[i], minuendCoef[j]);
               swap(minuendExpon[i], minuendExpon[j]);
           }
       }
   }
 
}

// outputs the specified polynomial
void output( int *coefficient, long long int *exponent, int size )
{
  cout << size << endl;
  cout << coefficient[ size - 1 ];
  for( int i = size - 2; i >= 0; i-- )
     cout << " " << coefficient[ i ];
  cout << endl;

  cout << exponent[ size - 1 ];
  for( int i = size - 2; i >= 0; i-- )
     cout << " " << exponent[ i ];
  cout << endl;
}
