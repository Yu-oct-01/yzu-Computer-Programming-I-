// Polynomial division provided that the quotient and remainder have integer coefficients
#include <iostream>
using namespace std;

// quotient = dividend / divisor; remainder = dividend % divisor provided that
// dividendExpon[ dividendSize - 1 ] >= divisorExpon[ divisorSize - 1 ], and
// neither dividend nor divisor is the zero polynomial
void division(int dividendCoef[], long long int dividendExpon[], int dividendSize,
    int divisorCoef[], long long int divisorExpon[], int divisorSize,
    int quotientCoef[], long long int quotientExpon[], int& quotientSize,
    int remainderCoef[], long long int remainderExpon[], int& remainderSize);

// returns true if and only if polynomial1 == polynomial2
bool equal(int coefficient1[], long long int exponent1[], int size1,
    int coefficient2[], long long int exponent2[], int size2);

// minuend -= subtrahend
void subtraction(int minuendCoef[], long long int minuendExpon[], int& minuendSize,
    int subtrahendCoef[], long long int subtrahendExpon[], int subtrahendSize);

// outputs the specified polynomial
void output(int coefficient[], long long int exponent[], int size);

const int arraySize1 = 20;
const int arraySize2 = 400;

int main()
{
    int T;
    cin >> T;
    for (int t = 0; t < T; t++)
    {
        int dividendCoef[arraySize2] = {};
        long long int dividendExpon[arraySize2] = {};
        int dividendSize = 0;
        cin >> dividendSize; // input dividend
        for (int i = dividendSize - 1; i >= 0; i--)
            cin >> dividendCoef[i];
        for (int i = dividendSize - 1; i >= 0; i--)
            cin >> dividendExpon[i];

        int divisorCoef[arraySize1] = {};
        long long int divisorExpon[arraySize1] = {};
        int divisorSize = 0;
        cin >> divisorSize; // input divisor
        for (int i = divisorSize - 1; i >= 0; i--)
            cin >> divisorCoef[i];
        for (int i = divisorSize - 1; i >= 0; i--)
            cin >> divisorExpon[i];

        int quotientCoef[arraySize1] = {};
        long long int quotientExpon[arraySize1] = {};
        int quotientSize = arraySize1;

        int remainderCoef[arraySize2] = {};
        long long int remainderExpon[arraySize2] = {};
        int remainderSize = dividendSize;

        // quotient = dividend / divisor; remainder = dividend % divisor
        division(dividendCoef, dividendExpon, dividendSize,
            divisorCoef, divisorExpon, divisorSize,
            quotientCoef, quotientExpon, quotientSize,
            remainderCoef, remainderExpon, remainderSize);

        output(quotientCoef, quotientExpon, quotientSize);
        output(remainderCoef, remainderExpon, remainderSize);
    }
}

// quotient = dividend / divisor; remainder = dividend % divisor provided that
// dividendExpon[ dividendSize - 1 ] >= divisorExpon[ divisorSize - 1 ], and
// neither dividend nor divisor is the zero polynomial
void division(int aCoef[], long long int aExpon[], int aSize,
    int bCoef[], long long int bExpon[], int bSize,
    int qCoef[], long long int qExpon[], int& qSize,
    int rCoef[], long long int rExpon[], int& rSize)
{
    int dCoef[arraySize2] = {};
    long long int dExpon[arraySize2] = {};
    int dSize = bSize;

    for (int i = rSize - 1; i >= 0; i--)
    {
        rExpon[i] = aExpon[i];
        rCoef[i] = aCoef[i];
    }
    
    qSize = 0;

    while (rSize > 0 && rExpon[rSize - 1] >= bExpon[bSize - 1])
    {
        for (int j = qSize; j > 0; j--)
        {
            qExpon[j] = qExpon[j-1];
            qCoef[j] = qCoef[j-1];
        }
        
        qExpon[0] = rExpon[rSize - 1] - bExpon[bSize - 1];
        qCoef[0] = rCoef[rSize - 1] / bCoef[bSize - 1];
        
        qSize++;

        for (int j = dSize - 1; j >= 0; j--)
        {
            dExpon[j] = qExpon[0] + bExpon[j];
            dCoef[j] = qCoef[0] * bCoef[j];
        }

        if (equal(rCoef, rExpon, rSize, dCoef, dExpon, dSize))//整除
        {
            rSize = 1;
            rExpon[0] = 0;
            rCoef[0] = 0;
            break;
        }
        
        subtraction(rCoef, rExpon, rSize, dCoef, dExpon, dSize);
    }
}

// returns true if and only if polynomial1 == polynomial2
bool equal(int coefficient1[], long long int exponent1[], int size1,
    int coefficient2[], long long int exponent2[], int size2)
{
    if (size1 != size2)
        return false;

    for (int i = 0; i < size1; i++)
        if (coefficient1[i] != coefficient2[i] || exponent1[i] != exponent2[i])
            return false;

    return true;
}

// minuend -= subtrahend // t=r-d
void subtraction(int minuendCoef[], long long int minuendExpon[], int& minuendSize,
    int subtrahendCoef[], long long int subtrahendExpon[], int subtrahendSize)
{
    int tCoef[arraySize1] = {};
    long long int tExpon[arraySize1] = {};
    int tSize = 0;

    int x = minuendSize - 1, y = subtrahendSize - 1;
    
        for (int x = minuendSize - 1; x>=0; x--)
        {
            for (int y = subtrahendSize - 1; y>=0; y--)
            {
                if (minuendExpon[x] == subtrahendExpon[y])
                {
                    minuendCoef[x] -= subtrahendCoef[y];
                    if (minuendCoef[x] == 0)
                    {
                        for (int j = x; j < minuendSize - 1; j++)
                        {
                            minuendCoef[j] = minuendCoef[j + 1];
                            minuendExpon[j] = minuendExpon[j + 1];
                        }
                        minuendSize--;
                    }
                    break;
                }
            }
        }
}

// outputs the specified polynomial
void output(int coefficient[], long long int exponent[], int size)
{
    cout << size << endl;
    cout << coefficient[size - 1];
    for (int i = size - 2; i >= 0; i--)
        cout << " " << coefficient[i];
    cout << endl;

    cout << exponent[size - 1];
    for (int i = size - 2; i >= 0; i--)
        cout << " " << exponent[i];
    cout << endl;
}
