// Polynomial multiplication
#include <iostream>
using namespace std;

// product = multiplicand * multiplier
void multiplication(long long int multiplicandCoef[], long long int multiplicandExpon[], int multiplicandSize,
    long long int multiplierCoef[], long long int multiplierExpon[], int multiplierSize,
    long long int productCoef[], long long int productExpon[], int& productSize);

// addend += adder
void addition(long long int addendCoef[], long long int addendExpon[], int& addendSize,
    long long int adderCoef[], long long int adderExpon[], int adderSize);

// returns true if and only if the specified polynomial is the zero polynomial
bool isZero(long long int coefficient[], int size);

// outputs the specified polynomial
void output(long long int coefficient[], long long int exponent[], int size);

const int arraySize = 10;

int main()
{
    int T;
    cin >> T;
    for (int t = 0; t < T; t++)
    {
        long long int multiplicandCoef[arraySize] = {};
        long long int multiplicandExpon[arraySize] = {};
        int multiplicandSize;
        cin >> multiplicandSize; // input multiplicand
        for (int i = multiplicandSize - 1; i >= 0; i--)
            cin >> multiplicandCoef[i];
        for (int i = multiplicandSize - 1; i >= 0; i--)
            cin >> multiplicandExpon[i];

        long long int multiplierCoef[arraySize] = {};
        long long int multiplierExpon[arraySize] = {};
        int multiplierSize;
        cin >> multiplierSize; // input multiplier
        for (int i = multiplierSize - 1; i >= 0; i--)
            cin >> multiplierCoef[i];
        for (int i = multiplierSize - 1; i >= 0; i--)
            cin >> multiplierExpon[i];

        long long int productCoef[arraySize * arraySize] = {};
        long long int productExpon[arraySize * arraySize] = {};
        int productSize = 1;

        // product = multiplicand * multiplier
        multiplication(multiplicandCoef, multiplicandExpon, multiplicandSize,
            multiplierCoef, multiplierExpon, multiplierSize,
            productCoef, productExpon, productSize);

        output(productCoef, productExpon, productSize);
    }
}

// product = multiplicand * multiplier
void multiplication(long long int aCoef[], long long int aExpon[], int aSize,
    long long int bCoef[], long long int bExpon[], int bSize,
    long long int productCoef[], long long int productExpon[], int& productSize)
{
    long long int tCoef[arraySize] = {}, tExpon[arraySize] = {};
    int tSize = 0, flag=0;

    for (int j = 0; j < bSize; j++)
    {
        for (int i = 0; i < aSize; i++)
        {
            tExpon[i] = aExpon[i] + bExpon[j];
            tCoef[i] = aCoef[i] * bCoef[j];
            tSize++;
        }
        if (flag == 0)//第一次直接放進去
        {
            flag = 1;
            for (int k = 0; k < tSize; k++)
            {
                productExpon[k] = tExpon[k];
                productCoef[k] = tCoef[k];
                productSize = tSize;
            }
        }
        else 
            addition(productCoef, productExpon, productSize,
                tCoef, tExpon, tSize);
        tSize = 0;
    }
    if (isZero(aCoef, aSize) || isZero(bCoef, bSize))
        productSize = 1;
}

// addend += adder
void addition(long long int addendCoef[], long long int addendExpon[], int& addendSize,
    long long int adderCoef[], long long int adderExpon[], int adderSize)
{
    for (int i = 0; i < adderSize; i++)
    {
        int flag = 0;
        for (int j = 0; j < addendSize; j++)
            if (adderExpon[i] == addendExpon[j])
            {
                addendCoef[j] += adderCoef[i];
                flag = 1;
            }
        if (flag == 0)//沒有相等的
        {
            addendSize++;//放進被加數
            addendExpon[addendSize - 1] = adderExpon[i];
            addendCoef[addendSize - 1] = adderCoef[i];
        }
    }
    for (int i = 0; i < addendSize; i++)//排序次方
    {

        for (int j = i + 1; j < addendSize; j++)
        {

            if (addendExpon[j] < addendExpon[i])
            {
                swap(addendExpon[j], addendExpon[i]);
                swap(addendCoef[j], addendCoef[i]);
            }
        }
    }
}

// returns true if and only if the specified polynomial is the zero polynomial
bool isZero(long long int coefficient[], int size)
{
    return (size == 1 && coefficient[0] == 0);
}

// outputs the specified polynomial
void output(long long int coefficient[], long long int exponent[], int size)
{
    cout << size << endl;
    cout << coefficient[size - 1];
    for (int i = size - 2; i >= 0; i--)
        cout << " " << coefficient[i];
    cout << endl;

    cout << exponent[size - 1];
    for (int i = size - 2; i >= 0; i--)
        cout << " " << exponent[i];
    cout << endl;
}
