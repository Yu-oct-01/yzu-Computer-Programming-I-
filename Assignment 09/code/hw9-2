#include <iostream>
#include <cstring>
#include <vector>
using namespace::std;

// returns true if and only if hugeInt1 == hugeInt2
bool equal( vector< int > hugeInt1, vector< int > hugeInt2 );

// difference = minuend - subtrahend provided that minuend >= subtrahend
vector< int > subtraction( vector< int > minuend, vector< int > subtrahend );

int main()
{
   char strA[ 251 ], strB[ 251 ];

   int T;
   cin >> T;
   for( int t = 0; t < T; ++t )
   {
      cin >> strA >> strB;

      int minuendSize = strlen( strA );
      vector< int > minuend( minuendSize );
      for( int i = 0; i < minuendSize; ++i )
         minuend[ i ] = strA[ minuendSize - 1 - i ] - '0';

      int subtrahendSize = strlen( strB );
      vector< int > subtrahend( subtrahendSize );
      for( int i = 0; i < subtrahendSize; ++i )
         subtrahend[ i ] = strB[ subtrahendSize - 1 - i ] - '0';

      vector< int > difference = subtraction( minuend, subtrahend );

      for( int i = difference.size() - 1; i >= 0; i-- )
         cout << difference[ i ];
      cout << endl;
   }
}

// returns true if and only if hugeInt1 == hugeInt2
bool equal( vector< int > hugeInt1, vector< int > hugeInt2 )
{
   int size1 = hugeInt1.size();
   int size2 = hugeInt2.size();
   if( size1 != size2 )
      return false;

   for( int i = 0; i < size1; i++ )
      if( hugeInt1[ i ] != hugeInt2[ i ] )
         return false;

   return true;
}

// difference = minuend - subtrahend provided that minuend >= subtrahend
vector< int > subtraction( vector< int > minuend, vector< int > subtrahend )
{
    if(equal(minuend, subtrahend))
    {
        vector<int> diff(1);
        return diff;
    }

    int diffSize = minuend.size();
    vector<int> diff(diffSize);

    int i;
    for(i=0; i<min(minuend.size(), subtrahend.size()); i++)
        diff[i] = minuend[i] - subtrahend[i];

    if(minuend.size() > subtrahend.size())
        for(; i<minuend.size(); i++)
            diff[i] = minuend[i];

    for(int j=0; j<diffSize-1; j++)
    {
        if(diff[j]<0)
        {
            diff[j+1] -= 1;
            diff[j] += 10;
        }
    }

    int temp=0;
    for(int j=diffSize-1; j>=0; j--)
        if(!diff[j])
            temp++;
        else
            break;

    for(int j=0; j<temp; j++)
        diff.pop_back();

    return diff;
}
