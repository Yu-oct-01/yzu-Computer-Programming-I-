#include<iostream>
#include<cstring>
using std::cin;
using std::cout;
using std::endl;

struct HugeInt
{
   int size;
   int *digit;
};

// quotient = dividend / divisor; remainder = dividend % divisor
// provided that dividend != 0, divisor != 0 and dividend >= divisor
void division( HugeInt dividend, HugeInt divisor, HugeInt &quotient, HugeInt &remainder );

// hugeInt /= 10, or equivalently, shifts right by one position
void divideBy10( HugeInt &hugeInt );

// minuend -= subtrahend
// provided that minuend != 0, subtrahend != 0 and minuend >= subtrahend
void subtraction( HugeInt &minuend, HugeInt subtrahend );

// returns true if and only if hugeInt1 < hugeInt2
// provided that hugeInt1 != 0 and hugeInt2 != 0
bool less( HugeInt hugeInt1, HugeInt hugeInt2 );

// return true if and only if hugeInt1 == hugeInt2
// provided that hugeInt1 != 0 and hugeInt2 != 0
bool equal( HugeInt hugeInt1, HugeInt hugeInt2 );

// returns true if and only if the specified huge integer is zero
bool isZero( HugeInt hugeInt );

const int arraySize = 250;

int main()
{
   char strA[ 251 ], strB[ 251 ];

   int T;
   cin >> T;
   for( int t = 0; t < T; ++t )
   {
      cin >> strA >> strB;

      HugeInt dividend;
      dividend.size = strlen( strA );
      dividend.digit = new int[ dividend.size ]();
      for( int i = 0; i < dividend.size; ++i )
         dividend.digit[ i ] = strA[ dividend.size - 1 - i ] - '0';

      HugeInt divisor;
      divisor.size = strlen( strB );
      divisor.digit = new int[ divisor.size ]();
      for( int i = 0; i < divisor.size; ++i )
         divisor.digit[ i ] = strB[ divisor.size - 1 - i ] - '0';

      HugeInt quotient;
      HugeInt remainder;
      division( dividend, divisor, quotient, remainder );

      for( int i = quotient.size - 1; i >= 0; i-- )
         cout << quotient.digit[ i ];
      cout << endl;

      for( int i = remainder.size - 1; i >= 0; i-- )
         cout << remainder.digit[ i ];
      cout << endl;

      delete[] dividend.digit;
      delete[] divisor.digit;
      delete[] quotient.digit;
      delete[] remainder.digit;
   }
}

// quotient = dividend / divisor; remainder = dividend % divisor
// provided that dividend != 0, divisor != 0 and dividend >= divisor
void division( HugeInt dividend, HugeInt divisor, HugeInt &quotient, HugeInt &remainder )
{
   remainder.size=dividend.size;
   remainder.digit=new int [remainder.size];
   for(int i=0; i<remainder.size; i++)//被除數放入remainder
      remainder.digit[i]=dividend.digit[i];

   HugeInt buffer;
   buffer.size = divisor.size + dividend.size-divisor.size;//使buffer大小跟被除數一樣
   buffer.digit=new int [buffer.size];

   for(int i=0; i<buffer.size; i++)//初始化
      buffer.digit[i]=0;

   int temp=buffer.size-1;
   for(int i=divisor.size-1; i>=0; i--)//除數從最左放入buffer
   {
      buffer.digit[temp]=divisor.digit[i];
      temp--;
   }
      
   quotient.size=dividend.size-divisor.size;
   if(less(remainder, buffer))//最大位數remainder<buffer
      divideBy10(buffer);//buffer少一位數
   else
      quotient.size++;

   quotient.digit=new int [quotient.size];
   for(int i=0; i<quotient.size; i++)//初始化
      quotient.digit[i]=0;

   for(int i=quotient.size-1; i>=0; i--)//做除法
   {
      while(!less(remainder, buffer))//remainder >= buffer
      {
         subtraction(remainder, buffer);
         quotient.digit[i]++;
         if(isZero(remainder))
            return;
      }
      divideBy10(buffer);
   }

   delete[] buffer.digit;
}

// hugeInt /= 10, or equivalently, shifts right by one position
void divideBy10( HugeInt &hugeInt )
{
   if( hugeInt.size == 1 )
      hugeInt.digit[ 0 ] = 0;
   else
   {
      for( int i = 1; i < hugeInt.size; i++ )
         hugeInt.digit[ i - 1 ] = hugeInt.digit[ i ];

      hugeInt.size--;
      hugeInt.digit[ hugeInt.size ] = 0;
   }
}

// minuend -= subtrahend
// provided that minuend != 0, subtrahend != 0 and minuend >= subtrahend
void subtraction( HugeInt &minuend, HugeInt subtrahend )
{
   HugeInt difference;
   
   if( equal( minuend, subtrahend ) )
   {
      minuend.size = 1;
      minuend.digit[ 0 ] = 0;
      return;
   }

   if(minuend.size > subtrahend.size)
      difference.size = minuend.size;
   else
      difference.size = subtrahend.size;

   difference.digit=new int [difference.size];

   for(int i=0; i<difference.size; i++)//初始化
      difference.digit[i]=0;

   for(int i=0; i<subtrahend.size; i++)//相減
      difference.digit[i]=minuend.digit[i] - subtrahend.digit[i];

   if(minuend.size != subtrahend.size)//放入沒減到的
      for(int i=subtrahend.size; i<minuend.size; i++)
         difference.digit[i] = minuend.digit[i];

   for (int i = 0; i < difference.size; i++)//處理借位
      if (difference.digit[i] < 0)
      {
         difference.digit[i] += 10;
         difference.digit[i + 1] -= 1;
      }

   for (int i = difference.size - 1; i >= 0; i--)//處理差的大小
      if (difference.digit[i] != 0)
      {
         difference.size = i + 1;
         break;
      }

   minuend.size=difference.size;
   for(int i=minuend.size-1; i>=0; i--)
      minuend.digit[i]=difference.digit[i];

   delete[] difference.digit;
}

// returns true if and only if hugeInt1 < hugeInt2
// provided that hugeInt1 != 0 and hugeInt2 != 0
bool less( HugeInt hugeInt1, HugeInt hugeInt2 )
{
   if (hugeInt1.size < hugeInt2.size)
        return 1;
    else if (hugeInt1.size == hugeInt2.size)
    {
        for (int i = hugeInt1.size - 1; i >= 0; i--)
        {
            if (hugeInt1.digit[i] < hugeInt2.digit[i])
                return 1;
            if (hugeInt1.digit[i] > hugeInt2.digit[i])
                return 0;
        }
        return 0;
    }
    else
        return 0;
}

// return true if and only if hugeInt1 == hugeInt2
// provided that hugeInt1 != 0 and hugeInt2 != 0
bool equal( HugeInt hugeInt1, HugeInt hugeInt2 )
{
   if( hugeInt1.size != hugeInt2.size )
      return false;

   for( int i = hugeInt1.size - 1; i >= 0; i-- )
      if( hugeInt1.digit[ i ] != hugeInt2.digit[ i ] )
         return false;

   return true;
}

// returns true if and only if the specified huge integer is zero
bool isZero( HugeInt hugeInt )
{
   return hugeInt.size == 1 && hugeInt.digit[ 0 ] == 0;
}
